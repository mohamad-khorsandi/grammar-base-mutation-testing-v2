

literal
	:	integerliteral
	|	floatingpointliteral
	|	booleanliteral
	|	characterliteral
	|	stringliteral
	|	nullliteral
	;


type
	:	primitivetype
	|	referencetype
	;

primitivetype
	:	annotation* numerictype
	|	annotation* 'boolean'
	;

numerictype
	:	integraltype
	|	floatingpointtype
	;

integraltype
	:	'byte'
	|	'short'
	|	'int'
	|	'long'
	|	'char'
	;

floatingpointtype
	:	'float'
	|	'double'
	;

referencetype
	:	classorinterfacetype
	|	typevariable
	|	arraytype
	;

classorinterfacetype
	:	(	classtype_lfno_classorinterfacetype
		|	interfacetype_lfno_classorinterfacetype
		)
		(	classtype_lf_classorinterfacetype
		|	interfacetype_lf_classorinterfacetype
		)*
	;

classtype
	:	annotation* identifier typearguments?
	|	classorinterfacetype '.' annotation* identifier typearguments?
	;

classtype_lf_classorinterfacetype
	:	'.' annotation* identifier typearguments?
	;

classtype_lfno_classorinterfacetype
	:	annotation* identifier typearguments?
	;

interfacetype
	:	classtype
	;

interfacetype_lf_classorinterfacetype
	:	classtype_lf_classorinterfacetype
	;

interfacetype_lfno_classorinterfacetype
	:	classtype_lfno_classorinterfacetype
	;

typevariable
	:	annotation* identifier
	;

arraytype
	:	primitivetype dims
	|	classorinterfacetype dims
	|	typevariable dims
	;

dims
	:	annotation* '[' ']' (annotation* '[' ']')*
	;

typeparameter
	:	typeparametermodifier* identifier typebound?
	;

typeparametermodifier
	:	annotation
	;

typebound
	:	'extends' typevariable
	|	'extends' classorinterfacetype additionalbound*
	;

additionalbound
	:	'&' interfacetype
	;

typearguments
	:	'<' typeargumentlist '>'
	;

typeargumentlist
	:	typeargument (',' typeargument)*
	;

typeargument
	:	referencetype
	|	wildcard
	;

wildcard
	:	annotation* '?' wildcardbounds?
	;

wildcardbounds
	:	'extends' referencetype
	|	'super' referencetype
	;

packagename
	:	identifier
	|	packagename '.' identifier
	;

typename
	:	identifier
	|	packageortypename '.' identifier
	;

packageortypename
	:	identifier
	|	packageortypename '.' identifier
	;

expressionname
	:	identifier
	|	ambiguousname '.' identifier
	;

methodname
	:	identifier
	;

ambiguousname
	:	identifier
	|	ambiguousname '.' identifier
	;



compilationunit
	:	packagedeclaration? importdeclaration* typedeclaration* EOF
	;

packagedeclaration
	:	packagemodifier* 'package' identifier ('.' identifier)* ';'
	;

packagemodifier
	:	annotation
	;

importdeclaration
	:	singletypeimportdeclaration
	|	typeimportondemanddeclaration
	|	singlestaticimportdeclaration
	|	staticimportondemanddeclaration
	;

singletypeimportdeclaration
	:	'import' typename ';'
	;

typeimportondemanddeclaration
	:	'import' packageortypename '.' '*' ';'
	;

singlestaticimportdeclaration
	:	'import' 'static' typename '.' identifier ';'
	;

staticimportondemanddeclaration
	:	'import' 'static' typename '.' '*' ';'
	;

typedeclaration
	:	classdeclaration
	|	interfacedeclaration
	|	';'
	;



classdeclaration
	:	normalclassdeclaration
	|	enumdeclaration
	;

normalclassdeclaration
	:	classmodifier* 'class' identifier typeparameters? superclass? superinterfaces? classbody
	;

classmodifier
	:	annotation
	|	'public'
	|	'protected'
	|	'private'
	|	'abstract'
	|	'static'
	|	'final'
	|	'strictfp'
	;

typeparameters
	:	'<' typeparameterlist '>'
	;

typeparameterlist
	:	typeparameter (',' typeparameter)*
	;

superclass
	:	'extends' classtype
	;

superinterfaces
	:	'implements' interfacetypelist
	;

interfacetypelist
	:	interfacetype (',' interfacetype)*
	;

classbody
	:	'{' classbodydeclaration* '}'
	;

classbodydeclaration
	:	classmemberdeclaration
	|	instanceinitializer
	|	staticinitializer
	|	constructordeclaration
	;

classmemberdeclaration
	:	fielddeclaration
	|	methoddeclaration
	|	classdeclaration
	|	interfacedeclaration
	|	';'
	;

fielddeclaration
	:	fieldmodifier* unanntype variabledeclaratorlist ';'
	;

fieldmodifier
	:	annotation
	|	'public'
	|	'protected'
	|	'private'
	|	'static'
	|	'final'
	|	'transient'
	|	'volatile'
	;

variabledeclaratorlist
	:	variabledeclarator (',' variabledeclarator)*
	;

variabledeclarator
	:	variabledeclaratorid ('=' variableinitializer)?
	;

variabledeclaratorid
	:	identifier dims?
	;

variableinitializer
	:	expression
	|	arrayinitializer
	;

unanntype
	:	unannprimitivetype
	|	unannreferencetype
	;

unannprimitivetype
	:	numerictype
	|	'boolean'
	;

unannreferencetype
	:	unannclassorinterfacetype
	|	unanntypevariable
	|	unannarraytype
	;

unannclassorinterfacetype
	:	(	unannclasstype_lfno_unannclassorinterfacetype
		|	unanninterfacetype_lfno_unannclassorinterfacetype
		)
		(	unannclasstype_lf_unannclassorinterfacetype
		|	unanninterfacetype_lf_unannclassorinterfacetype
		)*
	;

unannclasstype
	:	identifier typearguments?
	|	unannclassorinterfacetype '.' annotation* identifier typearguments?
	;

unannclasstype_lf_unannclassorinterfacetype
	:	'.' annotation* identifier typearguments?
	;

unannclasstype_lfno_unannclassorinterfacetype
	:	identifier typearguments?
	;

unanninterfacetype
	:	unannclasstype
	;

unanninterfacetype_lf_unannclassorinterfacetype
	:	unannclasstype_lf_unannclassorinterfacetype
	;

unanninterfacetype_lfno_unannclassorinterfacetype
	:	unannclasstype_lfno_unannclassorinterfacetype
	;

unanntypevariable
	:	identifier
	;

unannarraytype
	:	unannprimitivetype dims
	|	unannclassorinterfacetype dims
	|	unanntypevariable dims
	;

methoddeclaration
	:	methodmodifier* methodheader methodbody
	;

methodmodifier
	:	annotation
	|	'public'
	|	'protected'
	|	'private'
	|	'abstract'
	|	'static'
	|	'final'
	|	'synchronized'
	|	'native'
	|	'strictfp'
	;

methodheader
	:	result methoddeclarator throws_?
	|	typeparameters annotation* result methoddeclarator throws_?
	;

result
	:	unanntype
	|	'void'
	;

methoddeclarator
	:	identifier '(' formalparameterlist? ')' dims?
	;

formalparameterlist
	:	formalparameters ',' lastformalparameter
	|	lastformalparameter
	;

formalparameters
	:	formalparameter (',' formalparameter)*
	|	receiverparameter (',' formalparameter)*
	;

formalparameter
	:	variablemodifier* unanntype variabledeclaratorid
	;

variablemodifier
	:	annotation
	|	'final'
	;

lastformalparameter
	:	variablemodifier* unanntype annotation* '...' variabledeclaratorid
	|	formalparameter
	;

receiverparameter
	:	annotation* unanntype (identifier '.')? 'this'
	;

throws_
	:	'throws' exceptiontypelist
	;

exceptiontypelist
	:	exceptiontype (',' exceptiontype)*
	;

exceptiontype
	:	classtype
	|	typevariable
	;

methodbody
	:	block
	|	';'
	;

instanceinitializer
	:	block
	;

staticinitializer
	:	'static' block
	;

constructordeclaration
	:	constructormodifier* constructordeclarator throws_? constructorbody
	;

constructormodifier
	:	annotation
	|	'public'
	|	'protected'
	|	'private'
	;

constructordeclarator
	:	typeparameters? simpletypename '(' formalparameterlist? ')'
	;

simpletypename
	:	identifier
	;

constructorbody
	:	'{' explicitconstructorinvocation? blockstatements? '}'
	;

explicitconstructorinvocation
	:	typearguments? 'this' '(' argumentlist? ')' ';'
	|	typearguments? 'super' '(' argumentlist? ')' ';'
	|	expressionname '.' typearguments? 'super' '(' argumentlist? ')' ';'
	|	primary '.' typearguments? 'super' '(' argumentlist? ')' ';'
	;

enumdeclaration
	:	classmodifier* 'enum' identifier superinterfaces? enumbody
	;

enumbody
	:	'{' enumconstantlist? ','? enumbodydeclarations? '}'
	;

enumconstantlist
	:	enumconstant (',' enumconstant)*
	;

enumconstant
	:	enumconstantmodifier* identifier ('(' argumentlist? ')')? classbody?
	;

enumconstantmodifier
	:	annotation
	;

enumbodydeclarations
	:	';' classbodydeclaration*
	;



interfacedeclaration
	:	normalinterfacedeclaration
	|	annotationtypedeclaration
	;

normalinterfacedeclaration
	:	interfacemodifier* 'interface' identifier typeparameters? extendsinterfaces? interfacebody
	;

interfacemodifier
	:	annotation
	|	'public'
	|	'protected'
	|	'private'
	|	'abstract'
	|	'static'
	|	'strictfp'
	;

extendsinterfaces
	:	'extends' interfacetypelist
	;

interfacebody
	:	'{' interfacememberdeclaration* '}'
	;

interfacememberdeclaration
	:	constantdeclaration
	|	interfacemethoddeclaration
	|	classdeclaration
	|	interfacedeclaration
	|	';'
	;

constantdeclaration
	:	constantmodifier* unanntype variabledeclaratorlist ';'
	;

constantmodifier
	:	annotation
	|	'public'
	|	'static'
	|	'final'
	;

interfacemethoddeclaration
	:	interfacemethodmodifier* methodheader methodbody
	;

interfacemethodmodifier
	:	annotation
	|	'public'
	|	'abstract'
	|	'default'
	|	'static'
	|	'strictfp'
	;

annotationtypedeclaration
	:	interfacemodifier* '@' 'interface' identifier annotationtypebody
	;

annotationtypebody
	:	'{' annotationtypememberdeclaration* '}'
	;

annotationtypememberdeclaration
	:	annotationtypeelementdeclaration
	|	constantdeclaration
	|	classdeclaration
	|	interfacedeclaration
	|	';'
	;

annotationtypeelementdeclaration
	:	annotationtypeelementmodifier* unanntype identifier '(' ')' dims? defaultvalue? ';'
	;

annotationtypeelementmodifier
	:	annotation
	|	'public'
	|	'abstract'
	;

defaultvalue
	:	'default' elementvalue
	;

annotation
	:	normalannotation
	|	markerannotation
	|	singleelementannotation
	;

normalannotation
	:	'@' typename '(' elementvaluepairlist? ')'
	;

elementvaluepairlist
	:	elementvaluepair (',' elementvaluepair)*
	;

elementvaluepair
	:	identifier '=' elementvalue
	;

elementvalue
	:	conditionalexpression
	|	elementvaluearrayinitializer
	|	annotation
	;

elementvaluearrayinitializer
	:	'{' elementvaluelist? ','? '}'
	;

elementvaluelist
	:	elementvalue (',' elementvalue)*
	;

markerannotation
	:	'@' typename
	;

singleelementannotation
	:	'@' typename '(' elementvalue ')'
	;


arrayinitializer
	:	'{' variableinitializerlist? ','? '}'
	;

variableinitializerlist
	:	variableinitializer (',' variableinitializer)*
	;



block
	:	'{' blockstatements? '}'
	;

blockstatements
	:	blockstatement blockstatement*
	;

blockstatement
	:	localvariabledeclarationstatement
	|	classdeclaration
	|	statement
	;

localvariabledeclarationstatement
	:	localvariabledeclaration ';'
	;

localvariabledeclaration
	:	variablemodifier* unanntype variabledeclaratorlist
	;

statement
	:	statementwithouttrailingsubstatement
	|	labeledstatement
	|	ifthenstatement
	|	ifthenelsestatement
	|	whilestatement
	|	forstatement
	;

statementnoshortif
	:	statementwithouttrailingsubstatement
	|	labeledstatementnoshortif
	|	ifthenelsestatementnoshortif
	|	whilestatementnoshortif
	|	forstatementnoshortif
	;

statementwithouttrailingsubstatement
	:	block
	|	emptystatement
	|	expressionstatement
	|	assertstatement
	|	switchstatement
	|	dostatement
	|	breakstatement
	|	continuestatement
	|	returnstatement
	|	synchronizedstatement
	|	throwstatement
	|	trystatement
	;

emptystatement
	:	';'
	;

labeledstatement
	:	identifier ':' statement
	;

labeledstatementnoshortif
	:	identifier ':' statementnoshortif
	;

expressionstatement
	:	statementexpression ';'
	;

statementexpression
	:	assignment
	|	preincrementexpression
	|	predecrementexpression
	|	postincrementexpression
	|	postdecrementexpression
	|	methodinvocation
	|	classinstancecreationexpression
	;

ifthenstatement
	:	'if' '(' expression ')' statement
	;

ifthenelsestatement
	:	'if' '(' expression ')' statementnoshortif 'else' statement
	;

ifthenelsestatementnoshortif
	:	'if' '(' expression ')' statementnoshortif 'else' statementnoshortif
	;

assertstatement
	:	'assert' expression ';'
	|	'assert' expression ':' expression ';'
	;

switchstatement
	:	'switch' '(' expression ')' switchblock
	;

switchblock
	:	'{' switchblockstatementgroup* switchlabel* '}'
	;

switchblockstatementgroup
	:	switchlabels blockstatements
	;

switchlabels
	:	switchlabel switchlabel*
	;

switchlabel
	:	'case' constantexpression ':'
	|	'case' enumconstantname ':'
	|	'default' ':'
	;

enumconstantname
	:	identifier
	;

whilestatement
	:	'while' '(' expression ')' statement
	;

whilestatementnoshortif
	:	'while' '(' expression ')' statementnoshortif
	;

dostatement
	:	'do' statement 'while' '(' expression ')' ';'
	;

forstatement
	:	basicforstatement
	|	enhancedforstatement
	;

forstatementnoshortif
	:	basicforstatementnoshortif
	|	enhancedforstatementnoshortif
	;

basicforstatement
	:	'for' '(' forinit? ';' expression? ';' forupdate? ')' statement
	;

basicforstatementnoshortif
	:	'for' '(' forinit? ';' expression? ';' forupdate? ')' statementnoshortif
	;

forinit
	:	statementexpressionlist
	|	localvariabledeclaration
	;

forupdate
	:	statementexpressionlist
	;

statementexpressionlist
	:	statementexpression (',' statementexpression)*
	;

enhancedforstatement
	:	'for' '(' variablemodifier* unanntype variabledeclaratorid ':' expression ')' statement
	;

enhancedforstatementnoshortif
	:	'for' '(' variablemodifier* unanntype variabledeclaratorid ':' expression ')' statementnoshortif
	;

breakstatement
	:	'break' identifier? ';'
	;

continuestatement
	:	'continue' identifier? ';'
	;

returnstatement
	:	'return' expression? ';'
	;

throwstatement
	:	'throw' expression ';'
	;

synchronizedstatement
	:	'synchronized' '(' expression ')' block
	;

trystatement
	:	'try' block catches
	|	'try' block catches? finally_
	|	trywithresourcesstatement
	;

catches
	:	catchclause catchclause*
	;

catchclause
	:	'catch' '(' catchformalparameter ')' block
	;

catchformalparameter
	:	variablemodifier* catchtype variabledeclaratorid
	;

catchtype
	:	unannclasstype ('|' classtype)*
	;

finally_
	:	'finally' block
	;

trywithresourcesstatement
	:	'try' resourcespecification block catches? finally_?
	;

resourcespecification
	:	'(' resourcelist ';'? ')'
	;

resourcelist
	:	resource (';' resource)*
	;

resource
	:	variablemodifier* unanntype variabledeclaratorid '=' expression
	;


primary
	:	(	primarynonewarray_lfno_primary
		|	arraycreationexpression
		)
		(	primarynonewarray_lf_primary
		)*
	;

primarynonewarray
	:	literal
	|	typename ('[' ']')* '.' 'class'
	|	'void' '.' 'class'
	|	'this'
	|	typename '.' 'this'
	|	'(' expression ')'
	|	classinstancecreationexpression
	|	fieldaccess
	|	arrayaccess
	|	methodinvocation
	|	methodreference
	;

primarynonewarray_lf_arrayaccess
	:
	;

primarynonewarray_lfno_arrayaccess
	:	literal
	|	typename ('[' ']')* '.' 'class'
	|	'void' '.' 'class'
	|	'this'
	|	typename '.' 'this'
	|	'(' expression ')'
	|	classinstancecreationexpression
	|	fieldaccess
	|	methodinvocation
	|	methodreference
	;

primarynonewarray_lf_primary
	:	classinstancecreationexpression_lf_primary
	|	fieldaccess_lf_primary
	|	arrayaccess_lf_primary
	|	methodinvocation_lf_primary
	|	methodreference_lf_primary
	;

primarynonewarray_lf_primary_lf_arrayaccess_lf_primary
	:
	;

primarynonewarray_lf_primary_lfno_arrayaccess_lf_primary
	:	classinstancecreationexpression_lf_primary
	|	fieldaccess_lf_primary
	|	methodinvocation_lf_primary
	|	methodreference_lf_primary
	;

primarynonewarray_lfno_primary
	:	literal
	|	typename ('[' ']')* '.' 'class'
	|	unannprimitivetype ('[' ']')* '.' 'class'
	|	'void' '.' 'class'
	|	'this'
	|	typename '.' 'this'
	|	'(' expression ')'
	|	classinstancecreationexpression_lfno_primary
	|	fieldaccess_lfno_primary
	|	arrayaccess_lfno_primary
	|	methodinvocation_lfno_primary
	|	methodreference_lfno_primary
	;

primarynonewarray_lfno_primary_lf_arrayaccess_lfno_primary
	:
	;

primarynonewarray_lfno_primary_lfno_arrayaccess_lfno_primary
	:	literal
	|	typename ('[' ']')* '.' 'class'
	|	unannprimitivetype ('[' ']')* '.' 'class'
	|	'void' '.' 'class'
	|	'this'
	|	typename '.' 'this'
	|	'(' expression ')'
	|	classinstancecreationexpression_lfno_primary
	|	fieldaccess_lfno_primary
	|	methodinvocation_lfno_primary
	|	methodreference_lfno_primary
	;

classinstancecreationexpression
	:	'new' typearguments? annotation* identifier ('.' annotation* identifier)* typeargumentsordiamond? '(' argumentlist? ')' classbody?
	|	expressionname '.' 'new' typearguments? annotation* identifier typeargumentsordiamond? '(' argumentlist? ')' classbody?
	|	primary '.' 'new' typearguments? annotation* identifier typeargumentsordiamond? '(' argumentlist? ')' classbody?
	;

classinstancecreationexpression_lf_primary
	:	'.' 'new' typearguments? annotation* identifier typeargumentsordiamond? '(' argumentlist? ')' classbody?
	;

classinstancecreationexpression_lfno_primary
	:	'new' typearguments? annotation* identifier ('.' annotation* identifier)* typeargumentsordiamond? '(' argumentlist? ')' classbody?
	|	expressionname '.' 'new' typearguments? annotation* identifier typeargumentsordiamond? '(' argumentlist? ')' classbody?
	;

typeargumentsordiamond
	:	typearguments
	|	'<' '>'
	;

fieldaccess
	:	primary '.' identifier
	|	'super' '.' identifier
	|	typename '.' 'super' '.' identifier
	;

fieldaccess_lf_primary
	:	'.' identifier
	;

fieldaccess_lfno_primary
	:	'super' '.' identifier
	|	typename '.' 'super' '.' identifier
	;

arrayaccess
	:	(	expressionname '[' expression ']'
		|	primarynonewarray_lfno_arrayaccess '[' expression ']'
		)
		(	primarynonewarray_lf_arrayaccess '[' expression ']'
		)*
	;

arrayaccess_lf_primary
	:	(	primarynonewarray_lf_primary_lfno_arrayaccess_lf_primary '[' expression ']'
		)
		(	primarynonewarray_lf_primary_lf_arrayaccess_lf_primary '[' expression ']'
		)*
	;

arrayaccess_lfno_primary
	:	(	expressionname '[' expression ']'
		|	primarynonewarray_lfno_primary_lfno_arrayaccess_lfno_primary '[' expression ']'
		)
		(	primarynonewarray_lfno_primary_lf_arrayaccess_lfno_primary '[' expression ']'
		)*
	;

methodinvocation
	:	methodname '(' argumentlist? ')'
	|	typename '.' typearguments? identifier '(' argumentlist? ')'
	|	expressionname '.' typearguments? identifier '(' argumentlist? ')'
	|	primary '.' typearguments? identifier '(' argumentlist? ')'
	|	'super' '.' typearguments? identifier '(' argumentlist? ')'
	|	typename '.' 'super' '.' typearguments? identifier '(' argumentlist? ')'
	;

methodinvocation_lf_primary
	:	'.' typearguments? identifier '(' argumentlist? ')'
	;

methodinvocation_lfno_primary
	:	methodname '(' argumentlist? ')'
	|	typename '.' typearguments? identifier '(' argumentlist? ')'
	|	expressionname '.' typearguments? identifier '(' argumentlist? ')'
	|	'super' '.' typearguments? identifier '(' argumentlist? ')'
	|	typename '.' 'super' '.' typearguments? identifier '(' argumentlist? ')'
	;

argumentlist
	:	expression (',' expression)*
	;

methodreference
	:	expressionname '::' typearguments? identifier
	|	referencetype '::' typearguments? identifier
	|	primary '::' typearguments? identifier
	|	'super' '::' typearguments? identifier
	|	typename '.' 'super' '::' typearguments? identifier
	|	classtype '::' typearguments? 'new'
	|	arraytype '::' 'new'
	;

methodreference_lf_primary
	:	'::' typearguments? identifier
	;

methodreference_lfno_primary
	:	expressionname '::' typearguments? identifier
	|	referencetype '::' typearguments? identifier
	|	'super' '::' typearguments? identifier
	|	typename '.' 'super' '::' typearguments? identifier
	|	classtype '::' typearguments? 'new'
	|	arraytype '::' 'new'
	;

arraycreationexpression
	:	'new' primitivetype dimexprs dims?
	|	'new' classorinterfacetype dimexprs dims?
	|	'new' primitivetype dims arrayinitializer
	|	'new' classorinterfacetype dims arrayinitializer
	;

dimexprs
	:	dimexpr dimexpr*
	;

dimexpr
	:	annotation* '[' expression ']'
	;

constantexpression
	:	expression
	;

expression
	:	lambdaexpression
	|	assignmentexpression
	;

lambdaexpression
	:	lambdaparameters '->' lambdabody
	;

lambdaparameters
	:	identifier
	|	'(' formalparameterlist? ')'
	|	'(' inferredformalparameterlist ')'
	;

inferredformalparameterlist
	:	identifier (',' identifier)*
	;

lambdabody
	:	expression
	|	block
	;

assignmentexpression
	:	conditionalexpression
	|	assignment
	;

assignment
	:	lefthandside assignmentoperator expression
	;

lefthandside
	:	expressionname
	|	fieldaccess
	|	arrayaccess
	;

assignmentoperator
	:	'='
	|	'*='
	|	'/='
	|	'%='
	|	'+='
	|	'-='
	|	'<<='
	|	'>>='
	|	'>>>='
	|	'&='
	|	'^='
	|	'|='
	;

conditionalexpression
	:	conditionalorexpression
	|	conditionalorexpression '?' expression ':' conditionalexpression
	;

conditionalorexpression
	:	conditionalandexpression
	|	conditionalorexpression '||' conditionalandexpression
	;

conditionalandexpression
	:	inclusiveorexpression
	|	conditionalandexpression '&&' inclusiveorexpression
	;

inclusiveorexpression
	:	exclusiveorexpression
	|	inclusiveorexpression '|' exclusiveorexpression
	;

exclusiveorexpression
	:	andexpression
	|	exclusiveorexpression '^' andexpression
	;

andexpression
	:	equalityexpression
	|	andexpression '&' equalityexpression
	;

equalityexpression
	:	relationalexpression
	|	equalityexpression '==' relationalexpression
	|	equalityexpression '!=' relationalexpression
	;

relationalexpression
	:	shiftexpression
	|	relationalexpression '<' shiftexpression
	|	relationalexpression '>' shiftexpression
	|	relationalexpression '<=' shiftexpression
	|	relationalexpression '>=' shiftexpression
	|	relationalexpression 'instanceof' referencetype
	;

shiftexpression
	:	additiveexpression
	|	shiftexpression '<' '<' additiveexpression
	|	shiftexpression '>' '>' additiveexpression
	|	shiftexpression '>' '>' '>' additiveexpression
	;

additiveexpression
	:	multiplicativeexpression
	|	additiveexpression '+' multiplicativeexpression
	|	additiveexpression '-' multiplicativeexpression
	;

multiplicativeexpression
	:	unaryexpression
	|	multiplicativeexpression '*' unaryexpression
	|	multiplicativeexpression '/' unaryexpression
	|	multiplicativeexpression '%' unaryexpression
	;

unaryexpression
	:	preincrementexpression
	|	predecrementexpression
	|	'+' unaryexpression
	|	'-' unaryexpression
	|	unaryexpressionnotplusminus
	;

preincrementexpression
	:	'++' unaryexpression
	;

predecrementexpression
	:	'--' unaryexpression
	;

unaryexpressionnotplusminus
	:	postfixexpression
	|	'~' unaryexpression
	|	'!' unaryexpression
	|	castexpression
	;

postfixexpression
	:	(	primary
		|	expressionname
		)
		(	postincrementexpression_lf_postfixexpression
		|	postdecrementexpression_lf_postfixexpression
		)*
	;

postincrementexpression
	:	postfixexpression '++'
	;

postincrementexpression_lf_postfixexpression
	:	'++'
	;

postdecrementexpression
	:	postfixexpression '--'
	;

postdecrementexpression_lf_postfixexpression
	:	'--'
	;

castexpression
	:	'(' primitivetype ')' unaryexpression
	|	'(' referencetype additionalbound* ')' unaryexpressionnotplusminus
	|	'(' referencetype additionalbound* ')' lambdaexpression
	;





ABSTRACT : 'abstract';
ASSERT : 'assert';
BOOLEAN : 'boolean';
BREAK : 'break';
BYTE : 'byte';
CASE : 'case';
CATCH : 'catch';
CHAR : 'char';
CLASS : 'class';
CONST : 'const';
CONTINUE : 'continue';
DEFAULT : 'default';
DO : 'do';
DOUBLE : 'double';
ELSE : 'else';
ENUM : 'enum';
EXTENDS : 'extends';
FINAL : 'final';
FINALLY : 'finally';
FLOAT : 'float';
FOR : 'for';
IF : 'if';
GOTO : 'goto';
IMPLEMENTS : 'implements';
IMPORT : 'import';
INSTANCEOF : 'instanceof';
INT : 'int';
INTERFACE : 'interface';
LONG : 'long';
NATIVE : 'native';
NEW : 'new';
PACKAGE : 'package';
PRIVATE : 'private';
PROTECTED : 'protected';
PUBLIC : 'public';
RETURN : 'return';
SHORT : 'short';
STATIC : 'static';
STRICTFP : 'strictfp';
SUPER : 'super';
SWITCH : 'switch';
SYNCHRONIZED : 'synchronized';
THIS : 'this';
THROW : 'throw';
THROWS : 'throws';
TRANSIENT : 'transient';
TRY : 'try';
VOID : 'void';
VOLATILE : 'volatile';
WHILE : 'while';



integerliteral
	:	decimalintegerliteral
	|	hexintegerliteral
	|	octalintegerliteral
	|	binaryintegerliteral
	;


decimalintegerliteral
	:	decimalnumeral integertypesuffix?
	;


hexintegerliteral
	:	hexnumeral integertypesuffix?
	;


octalintegerliteral
	:	octalnumeral integertypesuffix?
	;


binaryintegerliteral
	:	binarynumeral integertypesuffix?
	;


integertypesuffix
	:	[lL]
	;


decimalnumeral
	:	'0'
	|	nonzerodigit (digits? | underscores digits)
	;


digits
	:	digit (digitsandunderscores? digit)?
	;


digit
	:	'0'
	|	nonzerodigit
	;


nonzerodigit
	:	[1-9]
	;


digitsandunderscores
	:	digitorunderscore+
	;


digitorunderscore
	:	digit
	|	'_'
	;


underscores
	:	'_'+
	;


hexnumeral
	:	'0' [xX] hexdigits
	;


hexdigits
	:	hexdigit (hexdigitsandunderscores? hexdigit)?
	;


hexdigit
	:	[0-9a-fA-F]
	;


hexdigitsandunderscores
	:	hexdigitorunderscore+
	;


hexdigitorunderscore
	:	hexdigit
	|	'_'
	;


octalnumeral
	:	'0' underscores? octaldigits
	;


octaldigits
	:	octaldigit (octaldigitsandunderscores? octaldigit)?
	;


octaldigit
	:	[0-7]
	;


octaldigitsandunderscores
	:	octaldigitorunderscore+
	;


octaldigitorunderscore
	:	octaldigit
	|	'_'
	;


binarynumeral
	:	'0' [bB] binarydigits
	;


binarydigits
	:	binarydigit (binarydigitsandunderscores? binarydigit)?
	;


binarydigit
	:	[01]
	;


binarydigitsandunderscores
	:	binarydigitorunderscore+
	;


binarydigitorunderscore
	:	binarydigit
	|	'_'
	;



floatingpointliteral
	:	decimalfloatingpointliteral
	|	hexadecimalfloatingpointliteral
	;


decimalfloatingpointliteral
	:	digits '.' digits? exponentpart? floattypesuffix?
	|	'.' digits exponentpart? floattypesuffix?
	|	digits exponentpart floattypesuffix?
	|	digits floattypesuffix
	;


exponentpart
	:	exponentindicator signedinteger
	;


exponentindicator
	:	[eE]
	;


signedinteger
	:	sign? digits
	;


sign
	:	[+-]
	;


floattypesuffix
	:	[fFdD]
	;


hexadecimalfloatingpointliteral
	:	hexsignificand binaryexponent floattypesuffix?
	;


hexsignificand
	:	hexnumeral '.'?
	|	'0' [xX] hexdigits? '.' hexdigits
	;


binaryexponent
	:	binaryexponentindicator signedinteger
	;


binaryexponentindicator
	:	[pP]
	;



booleanliteral
	:	'true'
	|	'false'
	;



characterliteral
	:	'\'' singlecharacter '\''
	|	'\'' escapesequence '\''
	;


singlecharacter
	:	~['\\]
	;



stringliteral
	:	'"' stringcharacters? '"'
	;


stringcharacters
	:	stringcharacter+
	;


stringcharacter
	:	~["\\]
	|	escapesequence
	;




escapesequence
	:	'\\' [btnfr"'\\]
	|	octalescape
    |   unicodeescape
	;


octalescape
	:	'\\' octaldigit
	|	'\\' octaldigit octaldigit
	|	'\\' zerotothree octaldigit octaldigit
	;


zerotothree
	:	[0-3]
	;



unicodeescape
    :   '\\' 'u' hexdigit hexdigit hexdigit hexdigit
    ;



nullliteral
	:	'null'
	;



LPAREN : '(';
RPAREN : ')';
LBRACE : '{';
RBRACE : '}';
LBRACK : '[';
RBRACK : ']';
SEMI : ';';
COMMA : ',';
DOT : '.';



ASSIGN : '=';
GT : '>';
LT : '<';
BANG : '!';
TILDE : '~';
QUESTION : '?';
COLON : ':';
EQUAL : '==';
LE : '<=';
GE : '>=';
NOTEQUAL : '!=';
AND : '&&';
OR : '||';
INC : '++';
DEC : '--';
ADD : '+';
SUB : '-';
MUL : '*';
DIV : '/';
BITAND : '&';
BITOR : '|';
CARET : '^';
MOD : '%';
ARROW : '->';
COLONCOLON : '::';

ADD_ASSIGN : '+=';
SUB_ASSIGN : '-=';
MUL_ASSIGN : '*=';
DIV_ASSIGN : '/=';
AND_ASSIGN : '&=';
OR_ASSIGN : '|=';
XOR_ASSIGN : '^=';
MOD_ASSIGN : '%=';
LSHIFT_ASSIGN : '<<=';
RSHIFT_ASSIGN : '>>=';
URSHIFT_ASSIGN : '>>>=';



identifier
	:	javaletter javaletterordigit*
	;


javaletter
	:	[a-zA-Z$_]
	;


javaletterordigit
	:	[a-zA-Z0-9$_]
	;





AT : '@';
ELLIPSIS : '...';




WS  :  [ \t\r\n\u000C]+
    ;

COMMENT
    :   '/*' .*? '*/'
    ;

LINE_COMMENT
    :   '//' ~[\r\n]*
    ;
